[tool.poetry]
name = "kubequery"
version = "0.0.1"
description = "Query Kubernetes through SQL"
authors = ["Lachezar Kolev <flachezarkolevgg@gmail.com>"]
repository = "https://github.com/lbkolev/kubequery"
documentation = "https://lbkolev.github.io/kubequery/"
readme = "README.md"
packages = [
  {include = "kubequery"}
]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"

[tool.poetry.group.dev.dependencies]
isort = "^5.12.0"
ruff = "^0.0.270"
black = "^23.3.0"
mypy = "^0.981"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
pre-commit = "^2.20.0"
tox = "^3.25.1"
sqlglot = "^13.3.0"
kubernetes = "^26.1.0"
kubernetes-stubs = "^22.6.0.post1"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^8.5.10"
mkdocstrings = {extras = ["python"], version = "^0.19.0"}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"

[tool.black]
line-length = 120
target-version = ['py311']
preview = true

[tool.mypy]
files = ["kubequery"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"

[tool.ruff]
target-version = "py311"
line-length = 120
fix = true
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["kubequery"]


